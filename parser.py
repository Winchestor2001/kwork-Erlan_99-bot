import json
import asyncio
import logging
import re

from telethon import TelegramClient, events
from telethon.errors import RPCError, FloodWaitError
from telethon.tl.functions.channels import JoinChannelRequest
from config import config
from aiogram import Bot

from models import DB

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
# with open("groups.json", "r", encoding="utf-8") as f:
#     GROUPS = json.load(f)
#
# # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# with open("keywords.json", "r", encoding="utf-8") as f:
#     KEYWORDS = set(json.load(f))

client = TelegramClient(config.SESSION_NAME, config.API_ID, config.API_HASH)
bot = Bot(token=config.TELEGRAM_BOT_TOKEN)

ADMIN_IDS = list(map(int, config.ADMIN_IDS.split(",")))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
GROUPS = DB().get_all_groups(make_list=True)
KEYWORDS = DB().get_all_keywords(make_list=True)


def is_relevant_post(message_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º."""
    text = message_text.lower().strip()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    return any(re.search(re.escape(phrase), text) for phrase in KEYWORDS)  # –ò—â–µ–º –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ


async def join_groups():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –±–æ—Ç –µ—â—ë –Ω–µ –≤ –Ω–∏—Ö."""
    async with client:
        bot_user = await client.get_me()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ

        for group in GROUPS:
            try:
                logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É: {group}")

                try:
                    entity = await client.get_entity(group)  # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                except ValueError:
                    logging.warning(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –∫–∞–Ω–∞–ª–æ–º (–≤ –∫–∞–Ω–∞–ª–∞—Ö –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
                if entity.broadcast:
                    logging.info(f"üîπ {group} - —ç—Ç–æ –∫–∞–Ω–∞–ª. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                    continue  # –ö–∞–Ω–∞–ª—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–µ
                if entity.left:
                    logging.info(f"üöÄ –ë–æ—Ç –ù–ï –≤ –≥—Ä—É–ø–ø–µ {group}, –ø—Ä–æ–±—É–µ–º –≤—Å—Ç—É–ø–∏—Ç—å...")
                    await client(JoinChannelRequest(group))  # –í—Å—Ç—É–ø–∞–µ–º –≤ –≥—Ä—É–ø–ø—É
                    logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ {group}")
                    await asyncio.sleep(5)  # –î–∞—ë–º –¢–µ–ª–µ–≥—Ä–∞–º—É –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫

            except FloodWaitError as e:
                logging.warning(f"‚è≥ FloodWait: –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(e.seconds)  # –ñ–¥—ë–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            except RPCError as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC –≤ –≥—Ä—É–ø–ø–µ {group}: {e}")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ {group}: {e}")


async def send_to_admins(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, disable_web_page_preview=True)
            logging.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def process_message(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º
    if event.message.action:
        logging.info(f"üîï –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.message.text}")
        return

    message_text = event.message.message.strip()

    if is_relevant_post(message_text):
        chat = await event.get_chat()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        message_id = event.message.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –ø—É–±–ª–∏—á–Ω–æ–π (–µ—Å—Ç—å username)
        if chat.username:
            message_link = f"https://t.me/{chat.username}/{message_id}"  # –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
        else:
            message_link = f"(–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞, chat_id: {event.chat_id}, message_id: {message_id})"

        alert_text = (
            f"üîî –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
            f"{message_text}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_link}"
        )

        logging.info(f"üöÄ –ü–æ–¥—Ö–æ–¥–∏—Ç: {alert_text}")
        await send_to_admins(alert_text)

    else:
        logging.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: {message_text}")


async def start_parser():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç Telethon-–∫–ª–∏–µ–Ω—Ç, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –≥—Ä—É–ø–ø—ã –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    global GROUPS

    logging.info("üîÑ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
    await join_groups()  # –ê–≤—Ç–æ–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    updated_groups = []
    async with client:
        for group in GROUPS:
            try:
                entity = await client.get_input_entity(group)  # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
                updated_groups.append(entity)
                logging.info(f"‚úÖ –ë—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è: {group}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è {group}: {e}")

    GROUPS = updated_groups  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å

    if not GROUPS:
        logging.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞! –ü—Ä–æ–≤–µ—Ä—å groups.json –∏ –¥–æ—Å—Ç—É–ø.")
        return

    @client.on(events.NewMessage(chats=GROUPS))
    async def handler(event):
        await process_message(event)

    while True:
        try:
            logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
            await client.start()
            await client.run_until_disconnected()
        except FloodWaitError as e:
            logging.warning(f"‚è≥ FloodWait: –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
            await asyncio.sleep(e.seconds)
        except RPCError as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {e}")
            await asyncio.sleep(10)


def run_parser():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telethon-–∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º asyncio-—Ü–∏–∫–ª–µ."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(start_parser())
